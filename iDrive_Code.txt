#include <MD_TCS230.h>
#include <FreqCount.h>
#include <Ultrasonic.h>
#include <avr/io.h>
#include <avr/interrupt.h>

#define R_TP 26
#define R_EP 4
#define L_TP 24
#define L_EP 13
#define F_TP 22
#define F_EP 7
#define B_TP 28
#define B_EP 6

#define S0 49
#define S1 36
#define S2 48
#define S3 50
#define OE 27
a
#define Buzzer 53
#define Buzzer_1 52

#define Front_L 43
#define Front_R 37
#define Back_L 41
#define Back_R 39
#define F_Indicator_L 29
#define B_Indicator_L 34
#define F_Indicator_R 42
#define B_Indicator_R 35

#define ENA 8
#define ENB 25
#define IN1 30
#define IN2 31
#define IN3 32
#define IN4 33

volatile long R_Dis = 0;
volatile long L_Dis = 0;
volatile long F_Dis = 0;
volatile long B_Dis = 0;

volatile bool Front;
volatile bool Back;
volatile bool Right;
volatile bool Left;

volatile bool moving;

volatile bool brake;

volatile uint8_t n = 0;

bool night;
bool Dipper;
bool L_Signal;
bool R_Signal;

uint8_t r = 0;
uint8_t g = 0;
uint8_t b = 0;

int Case = 0;

uint8_t Lane = 0;

Ultrasonic Right_D (R_TP,R_EP);
Ultrasonic Left_D (L_TP,L_EP);
Ultrasonic Front_D (F_TP,F_EP);
Ultrasonic Back_D (B_TP,B_EP);

MD_TCS230  CS(S2, S3, S0, S1, OE);

void init_Timer1();
void init_Timer3();
void init_Timer4();
void init_sonars();
void init_colorSensor();
void init_hBridge();
void readSensor();
void measureDistance();
void checkCase();
void Action();
void MotorA(int, int);
void MotorB(int);
bool Red();
bool Green();
bool Front_F();
bool Back_F();
bool Right_F();
bool Left_F();

#define LEDPIN 23
 
void setup()
{  
    init_colorSensor();
    init_sonars();
    init_hBridge();
    
    CS.begin();
    
    cli();
    
    init_Timer1();
    init_Timer3();
    init_Timer4();
        
    sei();

    pinMode(LEDPIN, OUTPUT);
                   
}
 
void loop()
{
  readSensor();
  checkCase();
  Action();
  
  night = true;
}

void init_Timer1()
{
    TCCR1A = 0;
    TCCR1B = 0;

    OCR1A = 5210;    //3Hz
    
    TCCR1B |= (1 << WGM12);
    
    TCCR1B |= (1 << CS10);
    TCCR1B |= (1 << CS12);
    
    TIMSK1 |= (1 << OCIE1A);
}

ISR(TIMER1_COMPA_vect)
{
    measureDistance(); 
}


void init_Timer3()
{
    TCCR3A = 0;
    TCCR3B = 0;
    
    TCNT3  = 0;
 
    OCR3A = 3908;    //4Hz

    TCCR3B |= (1 << WGM32);
    
    TCCR3B |= (1 << CS30);
    TCCR3B |= (1 << CS32);
    
    TIMSK3 |= (1 << OCIE3A);
}

ISR(TIMER3_COMPA_vect)
{
    if (Dipper)
    {
      digitalWrite (Front_L, digitalRead(Front_L)^1);
      digitalWrite (Front_R, digitalRead(Front_R)^1);
    }
    
    if (L_Signal)
    {
      n++;
      
      if (n==2)
      {
        digitalWrite (B_Indicator_L, digitalRead(B_Indicator_L)^1);
        digitalWrite (F_Indicator_L, digitalRead(F_Indicator_L)^1);
        n=0;
      }
    }
      
    else if (R_Signal)
    {
      n++;
        
      if (n==2)
      {
        digitalWrite (B_Indicator_R, digitalRead(B_Indicator_R)^1);
        digitalWrite (F_Indicator_R, digitalRead(F_Indicator_R)^1);
        n=0;
      }
    }

}

void init_Timer4()
{
    TCCR4A = 0;
    TCCR4B = 0;
    TCCR4C = 0;
 
    OCR4A = 158;
    
    TCCR4B |= (1 << WGM42);
  
    TCCR4B |= (1 << CS40);
    TCCR4B |= (1 << CS42);
   
    TIMSK4 |= (1 << OCIE4A);
}

ISR(TIMER4_COMPA_vect)
{
  if (!R_Signal && !L_Signal)
  {
    digitalWrite (B_Indicator_L, LOW);
    digitalWrite (F_Indicator_L, LOW);
    digitalWrite (B_Indicator_R, LOW);
    digitalWrite (F_Indicator_R, LOW);
  }
  
  if (brake)
  {
    digitalWrite(Back_R,HIGH);
    digitalWrite(Back_L,HIGH);
  }
  
  if (!brake)
  {
    digitalWrite(Back_R, LOW);
    digitalWrite(Back_L, LOW);  
  }
  
  if (!Dipper)
  {
    if (night)
    {
      digitalWrite (Front_L, HIGH);
      digitalWrite (Front_R, HIGH);
    }
    
    else
    {
      digitalWrite (Front_L, LOW);
      digitalWrite (Front_R, LOW);
    }
  }
}




void checkCase()
{
  
  if (Front)
  {
    Case = 0;
  }
  
  else if (!Front)
  {
    Case = 3;
  }
  
  
  
//  else if (Red)    //stop
//  {
//    Case = 1;
//  }
//  
//  else if (!Back && Front)    //Dipper
//  {
//    Case = 1;
//  }
//  else if(!Front && Left)
//  {
//    Case = 2;
//  }
//  
//  else if (!Front && !Left)
//  {
//    Case = 4;
//  }
//  
//  else if (!Front && Back)
//  {
//    Case = 5;
//  }
  //digitalWrite (LEDPIN, HIGH);
  
//  else if (!Front && !Back && !Right &&   !Left)    //continue after buzzer
//  {
//    Case = 3;
//  }
//  
//  else if (!Front && !Back && !Right && Left && (Lane ==3))    //continue after buzzer
//  {
//    Case = 4;
//  }
////  
////  if (!Red && Front && (Lane == 2))    //move forward
////  Case = 2;
////  
//  else if (!Red && !Front && !Back && !Right && Left && (Lane !=3))    //move left
//  {
//    Case = 5;
//  }
////  
//  else if (!Red && !Front && Right && (Lane != 1))    //move right
//  {
//    Case = 6;
//  }
//  else if (!Red && !Back && Front)    //move forward
//  {
//    Case = 7;
//  }
//  
//  if (!Red && !Front && Right && (Lane == 1) && Left && (Lane != 3))    //move left
//  Case = 5;
//  
//  if (!Red && !Front && Left && Right && (Lane == 1))    //move left   
//  Case = 6;
//  
//  if (!Red && !Front && Left && Right && (Lane != 1) && (Lane != 3))    //move left   
//  Case = 7;
//  
//  if (!Red && !Front && Back && !Left && !Right)    //move backward
//  Case = 8;
  
  
  
  
    
}

void Action()
{
  switch (Case)
  {
    case 0:
      motorA(1, 100);
      digitalWrite(Buzzer,LOW);
      digitalWrite(Buzzer_1,LOW);
      brake = false;
//  moving = true;
      if (F_Dis<70)
      {
        Dipper = true;
      }
      else
      {
        Dipper = false;
      }
      break;
    
//      case 1:
//        Dipper = false;
//        digitalWrite(Buzzer,LOW);
//        digitalWrite(Buzzer_1,LOW);
//        brake = false;
//        motorA(1, 100);
//        break;
//      
//      case 2:
//        digitalWrite(Buzzer,LOW);
//        digitalWrite(Buzzer_1,LOW);
//        brake = false;
//        Dipper = false;
//        motorA(1,100);
//        motorB(2);
//        L_Signal = true;
//        delay(700);
//        motorB(0);
//        delay(700);
//        L_Signal = false;
//        R_Signal = true;
//        motorB(1);
//        delay(800);
//        R_Signal = false;
//        motorB(0);
//        break;
//      
      
      case 3:
        motorA(3, 100);
        Dipper = true;
        brake = true;
        digitalWrite(Buzzer,HIGH);
        digitalWrite(Buzzer_1,HIGH);
        break;
      
//      case 4:
//        motorA(3, 100);
//        Dipper = false;
//        brake = true;
//        break;
//      
//      case 5:
//      Dipper = false;
//      digitalWrite(Buzzer,LOW);
//      digitalWrite(Buzzer_1,LOW);
//      brake = true;
//      motorA(2, 100);
//      break;
//      
//      case 6:
//      Dipper = false;
//      digitalWrite(Buzzer,LOW);
//      motorB(1);
//      delay(700);
//      motorB(0);
//      delay(700);
//      motorB(2);
//      delay(700);
//      motorB(0);
//      break;
//      
//      case 7:
//      motorA(1, 100);
//      digitalWrite(Buzzer,LOW);
////  moving = true;
//      if (F_Dis<50)
//      {
//        Dipper = true;
//      }
//      else
//      {
//        Dipper = false;
//      }
//      break;
}
  
}


bool Red()
{
 if (r>150 && g<100 && b<100)
 return true;
 
 else return false; 
}

bool Green()
{
  if (r<100 && g>150 && b<100)
  return true;
  
  else return false;
}

bool Front_F()
{
  if (F_Dis>40)
  {
    return true;
  }
  
  else
  {
    return false;
  }
}

bool Back_F()
{
  if (B_Dis>10)
  return true;
  
  else return false;
}

bool Left_F()
{
  if (L_Dis>10)
  return true;
  
  else return false;
}

bool Right_F()
{
  if (R_Dis>10)
  return true;
  
  else return false;
}


void motorA(int mode, int percent)
{
  int duty = map(percent, 0, 100, 0, 255);
  
  switch(mode)
  {
    case 0:  //disable
      digitalWrite(ENA, LOW);
      moving = false;
      break;
      
    case 1:  //move forward
      digitalWrite(IN1, HIGH);   
      digitalWrite(IN2, LOW);  
      analogWrite(ENA, duty);
      moving = true;  
      break;
      
    case 2:  //move backward
      digitalWrite(IN1, LOW);   
      digitalWrite(IN2, HIGH);
      analogWrite(ENA, duty);
      moving = true;  
      break;
      
    case 3:  //brake
      digitalWrite(IN1, LOW);   
      digitalWrite(IN2, LOW);  
      analogWrite(ENA, duty);
      moving = false;  
      break;
  }
}

 void motorB(int mode)
{
  
  switch(mode)
  {
    case 0:  //disable
      digitalWrite(ENB, LOW);
      break;
      
    case 1:  //turn right
      digitalWrite(IN3, HIGH);   
      digitalWrite(IN4, LOW);  
      analogWrite(ENB, HIGH);  
      break;
      
    case 2:  //turn left
      digitalWrite(IN3, LOW);   
      digitalWrite(IN4, HIGH);  
      digitalWrite(ENB, HIGH);
      break;
      
    case 3:  //brake
      digitalWrite(IN3, LOW);   
      digitalWrite(IN4, LOW);  
      digitalWrite(ENB, HIGH);  
      break;
  }
}

void init_sonars()
{
  pinMode (R_TP, OUTPUT);
  pinMode (R_EP, INPUT);
  
  pinMode (L_TP, OUTPUT);
  pinMode (L_EP, INPUT);
  
  pinMode (F_TP, OUTPUT);
  pinMode (F_EP, INPUT);
  
  pinMode (B_TP, OUTPUT);
  pinMode (B_EP, INPUT);
}


void init_colorSensor()
{
  pinMode (S0, OUTPUT);
  pinMode (S1, OUTPUT);
  pinMode (S2, OUTPUT);
  pinMode (S3, OUTPUT);
  pinMode (OE, OUTPUT);
}

void init_hBridge()
{
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
}

void readSensor()
{
  static  bool  waiting;
  
  if (!waiting)
  {
    CS.read();
    waiting = true;
  }
  else
  {
    if (CS.available()) 
    {
      colorData rgb;
      
      CS.getRGB(& rgb);
      
      r = rgb.value[0];
      g = rgb.value[1];
      b = rgb.value[2];
      
      waiting = false;
    }
  }
}

void measureDistance()
{
  R_Dis = Right_D.Ranging(INC);
  L_Dis = Left_D.Ranging(INC);
  F_Dis = Front_D.Ranging(INC);
  B_Dis = Back_D.Ranging(INC);
   
  Front = Front_F();
  Back = Back_F();
  Right = Right_F();
  Left = Left_F();
}